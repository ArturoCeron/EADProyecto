{
  "_from": "os-paths",
  "_id": "os-paths@6.9.0",
  "_inBundle": false,
  "_integrity": "sha512-b6fbX4phQ0zydXASUr4GNAIWGtG1LzUoHdQxUpgkpYz/WszdpVGlRKkMIaLhZnRymDz4lPQfX9cx0qvDfYPmPg==",
  "_location": "/os-paths",
  "_phantomChildren": {},
  "_requested": {
    "type": "tag",
    "registry": true,
    "raw": "os-paths",
    "name": "os-paths",
    "escapedName": "os-paths",
    "rawSpec": "",
    "saveSpec": null,
    "fetchSpec": "latest"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/os-paths/-/os-paths-6.9.0.tgz",
  "_shasum": "c6ab6a0a6bac700acaa415fdceb2a4c309af78fe",
  "_spec": "os-paths",
  "_where": "E:\\Visual Studio Code\\Programas\\nodeJS\\Recomendador",
  "author": {
    "name": "Roy Ivy III",
    "email": "rivy.dev@gmail.com"
  },
  "ava": {
    "files": [
      "!**/*.test-d.ts"
    ],
    "timeout": "60s",
    "typescript": {
      "rewritePaths": {
        "src/": "build/testbed/src/"
      }
    }
  },
  "bugs": {
    "url": "https://github.com/rivy/js.os-paths/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Determine common OS/platform paths (home, temp, ...)",
  "devDependencies": {
    "@ava/typescript": "^1.1.1",
    "@commitlint/cli": "^11.0.0",
    "@commitlint/config-conventional": "^11.0.0",
    "@istanbuljs/nyc-config-typescript": "^1.0.1",
    "@rollup/plugin-replace": "^2.3.4",
    "@types/node": "^14.14.20",
    "@typescript-eslint/eslint-plugin": "^4.12.0",
    "@typescript-eslint/parser": "^4.12.0",
    "ava": "^3.15.0",
    "codecov": "^3.5.0",
    "command-exists": "^1.2.9",
    "coveralls": "^3.0.5",
    "cross-spawn": "^7.0.3",
    "cspell": "^4.2.7",
    "editorconfig-checker": "^3.3.0",
    "eol-converter-cli": "^1.0.8",
    "eslint": "^7.17.0",
    "eslint-config-prettier": "^7.1.0",
    "eslint-plugin-eslint-comments": "^3.2.0",
    "eslint-plugin-functional": "^3.2.1",
    "eslint-plugin-import": "^2.22.0",
    "eslint-plugin-security": "^1.4.0",
    "eslint-plugin-security-node": "^1.0.14",
    "exec-if-updated": "git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0",
    "is-ci": "^2.0.0",
    "is-node-modern": "^1.0.0",
    "npm-run-all": "^4.1.5",
    "nyc": "^15.1.0",
    "open-cli": "^6.0.1",
    "prettier": "^2.1.1",
    "remark-cli": "^9.0.0",
    "remark-footnotes": "^3.0.0",
    "remark-preset-lint-consistent": "^4.0.0",
    "remark-preset-lint-markdown-style-guide": "^4.0.0",
    "remark-preset-lint-recommended": "^5.0.0",
    "remark-retext": "^4.0.0",
    "retext-english": "^3.0.4",
    "retext-passive": "^3.0.0",
    "retext-repeated-words": "^3.0.0",
    "retext-sentence-spacing": "^4.0.0",
    "retext-syntax-urls": "^2.0.0",
    "rimraf": "^3.0.2",
    "rollup": "^2.36.1",
    "rollup-plugin-dts": "^2.0.1",
    "rollup-plugin-typescript2": "^0.29.0",
    "shx": "^0.3.3",
    "ts-node": "^9.0.0",
    "tsd": "^0.14.0",
    "typedoc": "^0.20.27",
    "typescript": "^4.1.3",
    "unified": "^9.2.0"
  },
  "devDependencies:#": "* for testing, Node-v6 requires ava < v2 and nyc < v15",
  "engines": {
    "node": ">= 4.0"
  },
  "exports": {
    ".": {
      "deno": "./src/mod.deno.ts",
      "import": "./dist/cjs/esm-wrapper/mod.esm.js",
      "require": "./dist/cjs/mod.cjs.js",
      "types": "./dist/types/mod.d.ts",
      "default": "./dist/cjs/mod.cjs.js"
    },
    "./package.json": "./package.json",
    "./cjs": {
      "require": "./dist/cjs/mod.cjs.js",
      "types": "./dist/cjs/mod.cjs.d.ts"
    }
  },
  "files": [
    "cjs",
    "dist/cjs",
    "dist/types",
    "CHANGELOG.mkd",
    "LICENSE",
    "README.md",
    "package.json"
  ],
  "homepage": "https://github.com/rivy/js.os-paths#readme",
  "keywords": [
    "common",
    "cross-platform",
    "directory",
    "environment",
    "linux",
    "mac",
    "macos",
    "node4",
    "node6",
    "node-v4",
    "node-v6",
    "osx",
    "path",
    "paths",
    "portable",
    "unix",
    "windows"
  ],
  "license": "MIT",
  "main": "./dist/cjs/mod.cjs.js",
  "module": "./dist/cjs/esm-wrapper/mod.esm.js",
  "name": "os-paths",
  "nyc": {
    "extends": "@istanbuljs/nyc-config-typescript",
    "exclude": [
      "eg/**",
      "test/**",
      "**/*.spec.js",
      "**/*.test.js",
      "**/*.spec.ts",
      "**/*.test.ts"
    ],
    "reporter": [
      "html",
      "text"
    ],
    "lines": "100",
    "branches": "96",
    "statements": "100"
  },
  "optionalDependencies": {},
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rivy/js.os-paths.git"
  },
  "scripts": {
    "# build # build/compile package": "",
    "# clean # remove build artifacts": "",
    "# coverage # calculate and display (or send) code coverage [alias: 'cov']": "",
    "# fix # fix package issues (automated/non-interactive)": "",
    "# fix:lint # fix ESLint issues": "",
    "# fix:style # fix Prettier formatting issues": "",
    "# help # display help": "",
    "# lint # check for package code 'lint'": "",
    "# lint:commits # check for commit flaws (using `commitlint` and `cspell`)": "",
    "# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)": "",
    "# lint:lint # check for code 'lint' (using `eslint`)": "",
    "# lint:markdown # check for markdown errors (using `remark`)": "",
    "# lint:spell # check for spelling errors (using `cspell`)": "",
    "# lint:style # check for format imperfections (using `prettier`)": "",
    "# realclean # remove all generated files": "",
    "# rebuild # clean and (re-)build project": "",
    "# reset:hard # remove *all* generated files and reinstall dependencies": "",
    "# retest # clean and (re-)test project": "",
    "# show:deps # show package dependencies": "",
    "# test # test package": "",
    "# test:code # test package code": "",
    "# test:types # test for type declaration errors (using `tsd`)": "",
    "# update # update/prepare for distribution [alias: 'dist']": "",
    "# update:changelog # update CHANGELOG (using `git changelog ...`)": "",
    "# update:dist # update distribution content": "",
    "## +:... == sub-scripts (may run 'visibly', but not user-facing)": "",
    "## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`": "",
    "## npm lifecycle scripts ##": "",
    "## npm-version scripts ##": "",
    "+:coverage": "run-s build test:code && is-ci && run-s cov:send || run-s cov:view",
    "+:max-node-8": "is-node-not-modern 10",
    "+:min-node-10": "is-node-modern 10",
    "_:exists:git-changelog": "node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )",
    "_:help": "< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"",
    "_:lint:commits.all:spell": "node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"",
    "_:lint:commits.new:commitlint": "node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"",
    "_:lint:commits.new:spell": "node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"",
    "_:show:deps:dev": "npm --silent ls --only development || shx true",
    "_:show:deps:prod": "npm --silent ls --only production || shx true",
    "_:update:changelog": "run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2",
    "_:update:dist.build": "shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm",
    "_:update:dist.normalizeEOL": "eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}",
    "_:update:dist.pack": "node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"",
    "_:update:dist.types": "shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs",
    "_:update:dist:rebuild": "shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded",
    "_:v_tag:exists": "node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"",
    "_:v_tag:missing": "run-s --silent _:v_tag:exists && exit 1 || exit 0",
    "_:vcs-clean": "git diff --quiet",
    "_:vcs-clean-err": "run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )",
    "_:vcs-strictly-clean": "git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"",
    "_:vcs-strictly-clean-err": "run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )",
    "_:version:spell:changelog_update": "run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2",
    "_:version:update:changelog": "run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2",
    "build": "run-s --silent \"build:*\"",
    "build:cjs": "exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"",
    "build:esm": "exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"",
    "build:testbed": "exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-testbed.succeeded \"run-s -n rebuild:testbed\"",
    "build:types": "exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"",
    "build:umd": "exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"",
    "clean": "rimraf build dist",
    "cov": "run-s coverage",
    "cov:html": "nyc report --reporter=html",
    "cov:send": "nyc report --reporter=text-lcov | codecov --disable=gcov --pipe",
    "cov:text": "nyc report",
    "cov:view": "run-s cov:html && cd coverage && open-cli index.html",
    "coverage": "run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"",
    "dist": "run-s update",
    "fix": "run-s fix:*",
    "fix:lint": "eslint . --fix",
    "fix:style": "prettier . --write",
    "help": "run-s --silent _:help",
    "lint": "run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"",
    "lint:commits": "run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"",
    "lint:editorconfig": "editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"",
    "lint:lint": "eslint .",
    "lint:markdown": "remark --quiet .",
    "lint:spell": "cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"",
    "lint:style": "prettier . --list-different",
    "prepublishOnly": "npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err",
    "preversion": "run-s --silent _:version:spell:changelog_update && npm run test --test-dist",
    "realclean": "run-s clean && rimraf coverage .nyc_output",
    "rebuild": "run-s clean build",
    "rebuild:cjs": "shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded",
    "rebuild:esm": "shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded",
    "rebuild:testbed": "shx rm -fr build/testbed && tsc -p tsconfig/tsconfig.testbed.json && shx mkdir -p build/.targets && shx touch build/.targets/build-testbed.succeeded",
    "rebuild:types": "shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded",
    "rebuild:umd": "shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded",
    "reset:hard": "git clean -dfx && git reset --hard && npm install",
    "retest": "run-s clean test",
    "show:deps": "run-s --silent _:show:deps:prod _:show:deps:dev || shx true",
    "test": "run-s --silent lint update:dist && run-p test:*",
    "test:code": "run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )",
    "test:types": "run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd",
    "update": "run-s update:changelog update:dist",
    "update:changelog": "run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"",
    "update:dist": "run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"",
    "version": "run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"
  },
  "tsd": {
    "directory": "test"
  },
  "type": "commonjs",
  "types": "./dist/types/mod.d.ts",
  "version": "6.9.0"
}
